apply plugin: 'java-gradle-plugin'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.bintray"

group 'com.likethesalad.android'
version '1.2.1'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation "com.google.auto.factory:auto-factory:$autoFactory_version"
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    compileOnly 'com.android.tools.build:gradle:3.3.3'
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.auto.factory:auto-factory:$autoFactory_version"
    annotationProcessor "com.google.auto.factory:auto-factory:$autoFactory_version"
    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation 'com.google.truth:truth:1.0'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

kapt {
    correctErrorTypes = true
}

sourceSets {
    functionalTest {
        java {
            srcDir file('src/functionalTest/java')
        }
        resources {
            srcDir file('src/functionalTest/resources')
        }
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

gradlePlugin {
    plugins {
        placeholderPlugin {
            id = 'placeholder-resolver'
            implementationClass = 'com.likethesalad.placeholder.ResolvePlaceholdersPlugin'
        }
    }

    testSourceSets sourceSets.functionalTest
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        myPublication(MavenPublication) {
            groupId = project.group
            version = project.version

            artifact sourcesJar
            artifact javadocJar
            from components.java

            pom {
                name = 'Android String XML Reference'
                description = 'This is a Gradle plugin for Android applications which resolves XML string references in other XML strings.'
                url = 'https://github.com/LikeTheSalad/android-string-reference'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'LikeTheSalad'
                        name = 'Cesar Munoz'
                        email = 'likethesalad@gmail.com'
                    }
                }
                scm {
                    url = 'https://github.com/LikeTheSalad/android-string-reference'
                }
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['myPublication']
    pkg {
        repo = 'public-repo'
        name = project.name
        licenses = ['MIT']
        desc = 'This is a Gradle plugin for Android applications which resolves XML string references in other XML strings.'
        websiteUrl = 'https://github.com/LikeTheSalad/android-string-reference'
        issueTrackerUrl = 'https://github.com/LikeTheSalad/android-string-reference/issues'
        vcsUrl = 'https://github.com/LikeTheSalad/android-string-reference.git'
        labels = ['android', 'gradle', 'plugin', 'string']
        publicDownloadNumbers = true
        version {
            name = project.version
            gpg {
                sign = true
                passphrase = project.hasProperty('passphrase') ? project.property('passphrase') : System.getenv('PASSPHRASE')
            }
        }
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}