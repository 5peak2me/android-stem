plugins {
    id 'java-gradle-plugin'
    id 'org.jetbrains.kotlin.jvm'
    id 'kotlin-kapt'
}

dependencies {
    embedded "com.google.dagger:dagger:$dagger_version"
    embedded project(':templates-provider-plugin')
    implementation project(':common-tools')
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'io.github.classgraph:classgraph:4.8.138'
    compileOnly "com.android.tools.build:gradle:$androidBuild_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    testImplementation "com.likethesalad.tools.testing:android-gradle:$testingUtilities_version"
    testImplementation "com.likethesalad.tools.testing:unit-testing:$testingUtilities_version"
    testImplementation "com.android.tools.build:gradle:7.3.0"
    testImplementation "net.lingala.zip4j:zip4j:2.9.1"
}

tasks.withType(PluginUnderTestMetadata).configureEach {
    pluginClasspath.from(configurations.compileOnly)
}

kapt {
    correctErrorTypes = true
}

sourceSets {
    functionalTest {
        java {
            srcDir file('src/functionalTest/java')
        }
        resources {
            srcDir file('src/functionalTest/resources')
        }
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

gradlePlugin {
    plugins {
        placeholderResolverPlugin {
            id = 'com.likethesalad.stem'
            implementationClass = 'com.likethesalad.stem.ResolvePlaceholdersPlugin'
        }
        templatesProvider {
            id = 'com.likethesalad.stem-library'
            implementationClass = 'com.likethesalad.android.templates.provider.TemplatesProviderPlugin'
        }
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}